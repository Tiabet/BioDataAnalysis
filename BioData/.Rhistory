set.seed(235569515)
rbinom(1, prob = 2/3, size = 15)
set.seed(235569515)
rbinom(1, prob = 2/3, size = 15)
set.seed(235569515)
rbinom(1, prob = 2/3, size = 15)
set.seed(235569515)
rbinom(1, prob = 2/3, size = 15)
set.seed(235569515)
rbinom(1, prob = 2/3, size = 15)
set.seed(235569515)
rbinom(1, prob = 2/3, size = 100)
set.seed(235569515)
rbinom(10, prob = 2/3, size = 100)
probabilities = dbinom(0:15, prob = 2/3, size = 15)
round(probabilities, 2)
probabilities = dbinom(0:15, prob = 2/3, size = 15)
probabilities
barplot(probabilities, names.arg = 0:15, col = "red")
barplot(probabilities, names.arg = 0:15, col = "green")
barplot(probabilities, names.arg = 0:15, col = "gray")
barplot(probabilities, names.arg = 0:15, col = "red")
barplot(dpois(0:12, 5), names.arg = 0:12, col = "red")
barplot(dpois(0:12, 5), names.arg = 0:12, col = "blue")
barplot(ppois(0:12, 5), names.arg = 0:12, col = "blue")
barplot(qpois(0:12, 5), names.arg = 0:12, col = "blue")
qpois(1,5)
barplot(ppois(0:12, 5), names.arg = 0:12, col = "blue")
barplot(dpois(0:12, 5), names.arg = 0:12, col = "blue")
barplot(rpois(100, lambda = 0.5), names.arg = 1:100)
load("data/e100.RData")
barplot(e100, ylim = c(0, 7), width = 0.7, xlim = c(-0.5, 100.5),
names.arg = seq(along = e100), col = "darkolivegreen")
setwd("C:/대학교/3학년/2학기/바이오데이터/BioData")
```
```
sys.Date()
mean(c(2,3,4))
Sys.Date()
```
```
```{r}
print(mean(c(2,4,5)))
print(Sys.Date())
print(mean(c(2,4,5)))
}
함수 정의
```{r}
```{r}
boring_function(3)
```{r}
```{r}
print(boring_function(3))
boring_function <- function(x){
x+3
}
print(boring_function(3))
print(boring_function('test'))
```{r}
```{r}
```{r}
```{r}
```{r}
```
```
```{r}
```{r}
mean(my_vector)
my_mean <- function(my_vector){
mean(my_vector)
}
my_mean(c(3,4,5))
```{r}
```{r}
boring_function <- function(x){
x+3
}
print(boring_function(4))
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
return num %% divisor
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(9)
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(10)
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(5)
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(,10)
boring_function <- function(x){
x+3
}
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(10,4)
load("../data/e100.RData")
load("/data/e100.RData")
load("./data/e100.RData")
e99 = e100[-which.max(e100)]
load("./data/e100.RData")
e99 = e100[-which.max(e100)]
e99
load("./data/e100.RData")
max(e100)
e99 = e100[-which.max(e100)]
e99
boring_function <- function(x){
x+3
}
#디폴트 선언
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(10,4)
remainder(divisor = 100, num = 123124)
boring_function <- function(x){
x+3
}
#디폴트 선언
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(10,4)
remainder(divisor = 100, num = 123124)
evaluate<-function(func,dat){
func(dat)
}
boring_function <- function(x){
x+3
}
#디폴트 선언
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(10,4)
remainder(divisor = 100, num = 123124)
evaluate<-function(func,dat){
func(dat)
}
evaluate(sd,c(3,6,2,9))
boring_function <- function(x){
x+3
}
#디폴트 선언
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(10,4)
remainder(divisor = 100, num = 123124)
evaluate<-function(func,dat){
func(dat)
}
evaluate(sd,c(3,6,2,9))
boring_function <- function(x){
x+3
}
#디폴트 선언
remainder <- function(num=7,divisor=3){
num %% divisor
}
print(boring_function(4))
remainder(10,4)
remainder(divisor = 100, num = 123124)
evaluate<-function(func,dat){
func(dat)
}
evaluate(sd,c(3,6,2,9))
evaluate(function(x){x[length(x)]},c(3,6,7,8))
telegram<-function(...){
paste("START", ..., "STOP", sep = ' ')
}
telegram("Message")
mad_libs<-function(...){
args<-list(...)
}
place <- args['place']
mad_libs<-function(...){
args<-list(...)
place <- args['place']
}
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library("vcd")
install.packages("vcd")
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library(vcd)
gf1 = goodfit(e99, "poisson")
rootogram(gf1, xlab = "", rect_gp = gpar(fill = "chartreuse4"))
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library(vcd)
gf1 = goodfit(e99, "poisson")
rootogram(gf1, xlab = "", rect_gp = gpar(fill = "chartreuse4"))
table(rpois(100, 3))
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library(vcd)
gf1 = goodfit(e99, "poisson")
rootogram(gf1, xlab = "", rect_gp = gpar(fill = "chartreuse4"))
table(e100)
table(rpois(100, 3))
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library(vcd)
gf1 = goodfit(e99, "poisson")
rootogram(gf1, xlab = "x-bar", rect_gp = gpar(fill = "chartreuse4"))
table(e100)
table(rpois(100, 3))
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library(vcd)
gf1 = goodfit(e99, "poisson")
rootogram(gf1, xlab = "x-bar", rect_gp = gpar(fill = "chartreuse4"))
table(e100)
table(rpois(100, 3))
loglikelihood = function(lambda, data = e100){
sum(log(dpois(data, lambda)))
}
lambdas = seq(0.05, 0.95, length = 100)
loglik = vapply(lambdas, loglikelihood, numeric(1))
plot(lambdas, loglik, type = "l", col = "red", ylab = "", lwd = 2,
xlab = expression(lambda))
m0 = mean(e100)
abline(v = m0, col = "blue", lwd = 2)
abline(h = loglikelihood(m0), col = "purple", lwd = 2)
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library(vcd)
gf1 = goodfit(e99, "poisson")
rootogram(gf1, xlab = "x-bar", rect_gp = gpar(fill = "chartreuse4"))
table(e100)
table(rpois(100, 3))
loglikelihood = function(lambda, data = e100){
sum(log(dpois(data, lambda)))
}
lambdas = seq(0.05, 0.95, length = 100)
loglik = vapply(lambdas, loglikelihood, numeric(1))
plot(lambdas, loglik, type = "l", col = "red", ylab = "", lwd = 2,
xlab = expression(lambda))
m0 = mean(e100)
abline(v = m0, col = "blue", lwd = 2)
abline(h = loglikelihood(m0), col = "purple", lwd = 2)
gf  =  goodfit(e100, "poisson")
gf$par
table(rpois(100, 0.55))
lambdas = seq(0.05, 0.95, length = 100)
lambdas
lambdas = seq(0.05, 0.95, length = 10)
lambdas
load("./data/e100.RData")
#max(e100)
e99 = e100[-which.max(e100)]
e99
barplot(table(e99), space = 0.8, col = "chartreuse4")
library(vcd)
gf1 = goodfit(e99, "poisson")
rootogram(gf1, xlab = "x-bar", rect_gp = gpar(fill = "chartreuse4"))
table(e100)
table(rpois(100, 3))
loglikelihood = function(lambda, data = e100){
sum(log(dpois(data, lambda)))
}
lambdas = seq(0.05, 0.95, length = 100)
loglik = vapply(lambdas, loglikelihood, numeric(1))
plot(lambdas, loglik, type = 'l', col = "red", ylab = "", lwd = 2,
xlab = expression(lambda))
m0 = mean(e100)
abline(v = m0, col = "blue", lwd = 2) #v는 수직선
abline(h = loglikelihood(m0), col = "purple", lwd = 2) #h는 수평선
#간단히 할 수 있는 goodfit 함수
gf  =  goodfit(e100, "poisson")
gf$par==m0
table(rpois(100, 0.55))
cb  =  c(rep(0, 110), rep(1, 10))
table(cb)
probs  =  seq(0, 0.3, by = 0.005)
likelihood = dbinom(sum(cb), prob = probs, size = length(cb))
plot(probs, likelihood, pch = 16, xlab = "probability of success",
ylab = "likelihood", cex=0.6)
cb  =  c(rep(0, 110), rep(1, 10))
table(cb)
probs  =  seq(0, 0.3, by = 0.005)
likelihood = dbinom(sum(cb), prob = probs, size = length(cb))
plot(probs, likelihood, pch = 16, xlab = "probability of success",
ylab = "likelihood", cex=0.6)
which.max(likelihood)
knitr::opts_chunk$set(echo = TRUE)
head(DNase)
head(DNase)
tail(DNase)
head(DNase)
tail(DNase)
head(DNase)
tail(DNase)
plot(DNase$conc, DNase$density)
head(DNase)
tail(DNase)
plot(DNase$conc, DNase$density)
plot(DNase$conc, DNase$density,
ylab = attr(DNase, "labels")$y,
xlab = paste(attr(DNase, "labels")$x, attr(DNase, "units")$x),
pch = 3,
col = "blue")
head(DNase)
tail(DNase)
plot(DNase$conc, DNase$density)
plot(DNase$conc, DNase$density,
ylab = attr(DNase, "labels")$y,
xlab = paste(attr(DNase, "labels")$x, attr(DNase, "units")$x),
pch = 3,
col = "blue")
hist(DNase$density, breaks=25, main = "density histogram")
hist(DNase$density, breaks=25, main = "density histogram")
boxplot(density ~ Run, data = DNase)
hist(DNase$density, breaks=25, main = "density histogram")
boxplot(density ~ DNase$Run, data = DNase)
hist(DNase$density, breaks=25, main = "density histogram")
boxplot(density ~ Run, data = DNase)
hist(DNase$density, breaks=25, main = "density histogram")
boxplot(density ~ Run, data = DNase, title = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = c(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = seq(c(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = seq(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = seq(1,11,1))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = c(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = seq(c(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = seq(c(1,11)))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
seq(1,11)
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = seq(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
install.packages('Hiiragi2013')
library('Hiiragi2013')
BiocManager::install("Hiiragi2013")
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = c(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = c(1,2,3,4,5,6,7,8,9,10,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
DNase$Run
hist(DNase$density, breaks=25, main = "density histogram")
DNase$Run <- factor(DNase$Run, levels = seq(1,11))
boxplot(density ~ Run, data = DNase, main = 'Density by Run')
DNase$Run
DNase
library(DNase)
View(DNase)
library("Hiiragi2013")
library(Hiiragi2013)
library("Hiiragi2013")
library(Hiiragi2013)
ggplot(DNase, aes(x = conc, y = density)) + geom_point()
library(ggplot2)
library(ggplot2)
ggplot(DNase, aes(x = conc, y = density)) + geom_point()
library(ggplot2)
ggplot(DNase, aes(x = conc, y = density)) + geom_point()
ggplot(groups, aes(x = sampleGroup, y = n)) +
geom_bar(stat = "identity")
library(ggplot2)
library(dplyr)
ggplot(DNase, aes(x = conc, y = density)) + geom_point()
ggplot(groups, aes(x = sampleGroup, y = n)) +
geom_bar(stat = "identity")
library(ggplot2)
library(dplyr)
ggplot(DNase, aes(x = conc, y = density)) + geom_point()
dftx = data.frame(t(Biobase::exprs(x)), pData(x))
BiocManager::install("Hiiragi2013")
install.packages("BioData")
install.packages('BiocManager')
install.packages("BiocManager")
library(Hiiragi2013)
BiocManager::install("Hiiragi2013")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Hiiragi2013")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Hiiragi2013")
library("Hmisc")
install.packages('Hmisc')
library("Hmisc")
ggplot(genes, aes( x = gene, y = value, fill = gene)) +
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
width = 0.25)
library("Hmisc")
library(ggplot2)
ggplot(genes, aes( x = gene, y = value, fill = gene)) +
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
width = 0.25)
install.packages('BioBase')
library(Biobase)
ggplot(genes, aes( x = gene, y = value, fill = gene)) +
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
width = 0.25)
library("Hmisc")
library(ggplot2)
genes = melt(Biobase::exprs(x)[selectedProbes, ],
varnames = c("probe", "sample"))
library(ggplot2)
library("Hmisc")
library(ggplot2)
library("reshape2")
genes = melt(Biobase::exprs(x)[selectedProbes, ],
varnames = c("probe", "sample"))
library(Biobas)
library("Hmisc")
library(ggplot2)
library("reshape2")
library(Biobas)
library("Hmisc")
library(ggplot2)
library("reshape2")
library(Biobase)
genes = melt(Biobase::exprs(x)[selectedProbes, ],
varnames = c("probe", "sample"))
library("reshape2")
library(Biobase)
